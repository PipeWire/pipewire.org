---
title: PipeWire
description: PipeWire â€” Multimedia processing
---
%header
  .header-content
    .container
    .row
      .col-lg-6.col-lg-offset-3.text-center
        =partial "animated-logo.svg"
        :css
          #pwlogo {
            fill: rgba(255,255,255,0.6) !important;
            transform: scale(1);
            transition: all 1s;
          }
          #pwlogo:hover {
            fill: #fff !important;
            transform: scale(1.1);
          }
          #konamiglow {
            transform: scale(0);
            animation-name: konami;
            animation-delay: 1000ms;
            animation-duration: 12s;
            animation-iteration-count: infinite;
            animation-direction: normal;
            animation-timing-function: ease-out;
            animation-fill-mode: forwards;
          }

          @keyframes konami {
            0% {transform: scale(1);}
            50% { transform: scale(20); }
            100% { transform: scale(1); }
          }

    .header-content-inner
      %h1
        = current_page.data.description
      %hr
        %p PipeWire is a project that aims to greatly improve handling of audio and video under Linux.
        It provides a low-latency, graph based processing engine on top of audio and video devices
        that can be used to support the use cases currently handled by both pulseaudio and JACK.
        PipeWire was designed with a powerful security model that makes interacting with audio and
        video devices from containerized applications easy, with supporting Flatpak applications
        being the primary goal. Alongside Wayland and Flatpak we expect PipeWire to provide a core
        building block for the future of Linux application development.

        %a.btn.btn-primary.btn-xl.page-scroll{:href => "#about"} Find Out More
  =partial "pcb.svg"

%section#about.bg-primary
  .container
    .row
      .col-lg-12.text-center
        =partial "workflow.svg"

        %p.text-faded
          Features include:
        %p.text-faded
          Capture and playback of audio and video with minimal latency.
        %p.text-faded
          Real-time Multimedia processing on audio and video.
        %p.text-faded
          Multiprocess architecture to let applications share multimedia content.
        %p.text-faded
          Seamless support for PulseAudio, JACK, ALSA and GStreamer applications.
        %p.text-faded
          Sandboxed applications support. See
          = link_to "Flatpak", "http://flatpak.org"
          for more info.
        %p &nbsp;

%section#getting
  .container
    .row
      .col-lg-10.col-lg-offset-1
        %h1.section-heading.text-center Getting PipeWire
        %hr.primary
        %p
          An older version of PipeWire (0.2) that does not support the audio use cases
          should be available in most distributions.
        %p
          If you want to get the code from GitLab then the latest PipeWire source code is
          available at
          = succeed "." do
            = link_to "GitHub", "https://gitlab.freedesktop.org/pipewire/pipewire"
          To clone the repository, just:

        :preserve
          <pre>
            <span class="unselectable">$ </span>git clone https://gitlab.freedesktop.org/pipewire/pipewire.git
          </pre>

        %h2 Setup
        %p
          PipeWire is using the Meson build system and we provide a convenience script
          and Makefile that makes building PipeWire fairly straightforward:

        :preserve
          <pre>
            <span class="unselectable">$ </span>./autogen.sh --prefix=$PREFIX
            <span class="unselectable">$ </span>make
            <span class="unselectable">$ </span>make install
          </pre>

        The
        %code $PREFIX
        is commonly set to
        %code /usr
        or
        = succeed "." do
          %code /usr/local

        %h2 Running
        %p
          You can test the PipeWire server from the source directory with:

        :preserve
          <pre>
            <span class="unselectable">$ </span>make run
          </pre>

        %p
          To test video capture and display with SDL from the source directory, try
          in another window:

        :preserve
          <pre>
            <span class="unselectable">$ </span>make shell
          </pre>

        %p
          This sets up the environment variables to run the example apps from the
          build directory like this:

        :preserve
          <pre>
            <span class="unselectable">$ </span>build/src/examples/video-play
          </pre>

        %p
          You can play around with the other examples as well. Don't forget to set the correct
          environment variables as shown above or else the plugins and modules won't be found.



%section#documentation
  .container
    .row
      .col-lg-10.col-lg-offset-1
        %h1.section-heading.text-center Documentation
        %hr.primary
        %p
          A collection of useful pages can be found on the
          = succeed "." do
            =link_to "PipeWire wiki", "https://gitlab.freedesktop.org/pipewire/pipewire/wiki"
        %p
          Developers can check out the
          =link_to "PipeWire API", "https://pipewire.github.io/pipewire/"
          documentation.

%section#get-involved
  .container
    .row
      .col-lg-10.col-lg-offset-1
        %h1.section-heading.text-center Get Involved
        %hr.primary
        %p
          PipeWire is Free Software and is developed in the open. It was created by
          Wim Taymans, Principal Engineer at Red Hat and co-creator of the GStreamer
          multimedia framework.

          Code can be found on
          = succeed "." do
            =link_to "GitLab", "https://gitlab.freedesktop.org/pipewire/pipewire"
        %p
          Join us on IRC at
          %em #pipewire
          on
          = succeed "." do
            =link_to "Freenode", "https://freenode.net/"
        %p
          Issues are tracked on
          = succeed "." do
            = link_to "GitLab Issues", "https://gitlab.freedesktop.org/pipewire/pipewire/issues"
